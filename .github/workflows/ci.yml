name: CI

# Enable Buildkit and let compose use it to speed up image building
env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

on:
  #pull_request:
  #  branches: [ "master", "main" ]
  #  paths-ignore: [ "docs/**" ]

  push:
    branches: [ "master", "main" ]
    paths-ignore: [ "docs/**" ]

#concurrency:
#  group: ${{ github.head_ref || github.run_id }}
#  cancel-in-progress: true

jobs:
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@v3

      - name: Add environment variables to .env
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          CELERY_FLOWER_USER: ${{ secrets.CELERY_FLOWER_USER }}
          CELERY_FLOWER_PASSWORD: ${{ secrets.CELERY_FLOWER_PASSWORD }}
        run: |
          touch .env
          echo DJANGO_SETTINGS_MODULE=config.settings.production >> .env
          echo DJANGO_SECRET_KEY=$DJANGO_SECRET_KEY >> .env
          echo DJANGO_ADMIN_URL=gG1lPTPACQQu6hYm0faZXr49IuI6YwfZ/ >> .env
          echo DJANGO_ALLOWED_HOSTS=beans.phonxis.online >> .env
          echo DJANGO_SECURE_SSL_REDIRECT=False >> .env
          echo DJANGO_SERVER_EMAIL="" >> .env
          echo SENDINBLUE_API_KEY="" >> .env
          echo GOOGLE_APPLICATION_CREDENTIALS="" >> .env
          echo DJANGO_GCP_STORAGE_BUCKET_NAME="" >> .env
          echo DJANGO_ACCOUNT_ALLOW_REGISTRATION=True >> .env
          echo WEB_CONCURRENCY=4 >> .env
          echo REDIS_URL=redis://redis:6379/0 >> .env
          echo CELERY_FLOWER_USER=$CELERY_FLOWER_USER >> .env
          echo CELERY_FLOWER_PASSWORD=$CELERY_FLOWER_PASSWORD >> .env
          echo POSTGRES_HOST=postgres >> .env
          echo POSTGRES_PORT=5432 >> .env
          echo POSTGRES_DB=$POSTGRES_DB >> .env
          echo POSTGRES_USER=$POSTGRES_USER >> .env
          echo POSTGRES_PASSWORD=$POSTGRES_PASSWORD >> .env
          echo DATABASE_URL=$DATABASE_URL >> .env
          echo USE_DOCKER=yes >> .env
          echo CELERY_BROKER_URL=redis://redis:6379/0 >> .env
          echo TELEGRAM_BOT_TOKEN=$TELEGRAM_BOT_TOKEN >> .env
          echo TELEGRAM_CHAT_ID=$TELEGRAM_CHAT_ID >> .env

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build images
        #env:
        #  POSTGRES_HOST: postgres
        #  POSTGRES_PORT: 5432
        #  POSTGRES_DB: ${{ secrets.MASTER_POSTGRES_HOST }}
        #  POSTGRES_USER: ${{ secrets.MASTER_POSTGRES_USER }}
        #  POSTGRES_PASSWORD: ${{ secrets.MASTER_POSTGRES_PASSWORD }}
        run: |
          docker-compose -f production.yml --env-file .env build

      - name: Push images
        run: |
          docker-compose -f production.yml push

#  linter:
#    runs-on: ubuntu-latest
#    steps:
#
#      - name: Checkout Code Repository
#        uses: actions/checkout@v3
#
#      - name: Set up Python
#        uses: actions/setup-python@v3
#        with:
#          python-version: "3.10"
#          cache: pip
#          cache-dependency-path: |
#            requirements/base.txt
#            requirements/local.txt
#
#      - name: Run pre-commit
#        uses: pre-commit/action@v2.0.3
#
#  # With no caching at all the entire ci process takes 4m 30s to complete!
#  pytest:
#    runs-on: ubuntu-latest
#
#    steps:
#
#      - name: Checkout Code Repository
#        uses: actions/checkout@v3
#
#      - name: Build the Stack
#        run:  docker-compose -f local.yml build
#
#      - name: Run DB Migrations
#        run:  docker-compose -f local.yml run --rm django python manage.py migrate
#
#      - name: Run Django Tests
#        run:  docker-compose -f local.yml run django pytest
#
#      - name: Tear down the Stack
#        run:  docker-compose -f local.yml down
